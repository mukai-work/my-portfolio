generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum WorkType {
  DISCOVERY
  DESIGN
  DEVELOPMENT
  QA
  PM
}

model RequirementBrief {
  id             String    @id @default(cuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  title          String
  rawText        String
  industry       String?
  sizeHint       String?
  ratePerHour    Float
  marginRate     Float
  bufferRate     Float
  targetDeadline DateTime?
  structuredSpec StructuredSpec?
  tasks          Task[]
  estimate       EstimateSummary?
  shareTokens    ShareToken[]
}

model StructuredSpec {
  id          String   @id @default(cuid())
  briefId     String   @unique
  functional  Json
  nonFunctional Json
  assumptions Json
  risks       Json
  brief       RequirementBrief @relation(fields: [briefId], references: [id])
}

model Task {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  briefId       String
  parentId      String?
  name          String
  description   String
  optimisticH   Float
  mostLikelyH   Float
  pessimisticH  Float
  dependsOn     Json
  assigneeHint  String?
  workType      WorkType
  brief         RequirementBrief @relation(fields: [briefId], references: [id], onDelete: Cascade)
  parent        Task?     @relation("TaskHierarchy", fields: [parentId], references: [id])
  children      Task[]    @relation("TaskHierarchy")
}

model EstimateSummary {
  id             String   @id @default(cuid())
  briefId        String   @unique
  expectedHours  Float
  stdDevHours    Float
  criticalPath   Json
  costPrice      Float
  sellPrice      Float
  grossMargin    Float
  mcP50Date      DateTime?
  mcP80Date      DateTime?
  mcHistogram    Json
  mcProbabilityByTarget Float?
  brief          RequirementBrief @relation(fields: [briefId], references: [id], onDelete: Cascade)
}

model ShareToken {
  id        String   @id @default(cuid())
  briefId   String
  token     String
  expiresAt DateTime
  brief     RequirementBrief @relation(fields: [briefId], references: [id], onDelete: Cascade)
}
